// Targeted by JavaCPP version 1.3.3: DO NOT EDIT THIS FILE

package com.example.lettuce;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class EngineLibrary extends com.example.lettuce.EngineConfigurer {
    static { Loader.load(); }

// Parsed from engine.hpp

// #ifndef ENGINE_HPP
// #define ENGINE_HPP

// #include <string>

@NoOffset public static class Engine extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Engine(Pointer p) { super(p); }

    public Engine(Callback cb) { super((Pointer)null); allocate(cb); }
    private native void allocate(Callback cb);
    public native void run();
}

public static class Callback extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Callback(Pointer p) { super(p); }

    public native void call(CbInfo info);
}

@NoOffset public static class CbInfo extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CbInfo(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CbInfo(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CbInfo position(long position) {
        return (CbInfo)super.position(position);
    }

    public CbInfo() { super((Pointer)null); allocate(); }
    private native void allocate();
    public native @StdString BytePointer msg_(); public native CbInfo msg_(BytePointer msg_);
    public native @StdString BytePointer usr_(); public native CbInfo usr_(BytePointer usr_);
    public native @StdString BytePointer getUsername();
    public native @StdString BytePointer getMessage();
}

// #endif // ENGINE_HPP


}
